<?xml version="1.0"?>
<rh:help xmlns:rh="http://www.r-project.org/help" xmlns:r="http://www.r-project.org" xmlns:s3="http://www.r-project.org/S3" xmlns:s4="http://www.r-project.org/S4" xmlns:xi="http://www.w3.org/2003/XInclude" created="2009-03-01 14:19:05">
<r:package>XDocTools</r:package>
<rh:topic> </rh:topic>
<rh:topic>getXSLTemplates</rh:topic>
<rh:topic>getXSLParameters</rh:topic>
<rh:title>Get information about an XSL document</rh:title>
<rh:description>
<para>These functions allow the caller to discover what templates, parameters and
 variables are defined within a given XSL file. They act as a table of contents
 for the file.
</para>
<para>
 Note that these are quite different from related functions available via the <r:pkg>Sxslt</r:pkg>
 package.  The functions here work on the XML documents defining the XSL stylesheet.
 The function <r:func pkg="Sxslt">getTemplate</r:func>  works at run-time when an XSL stylesheet is being used to 
 transform an XML document.  There we can see all the templates (after include's and import's) and ask the 
 XSL engine to match a node as it would during the processing.
</para>
</rh:description>

<rh:arguments>
   <xi:include href="getXIncludeFiles.xml" xpointer="xpointer(//*[@id='doc'])"/>
</rh:arguments>

<rh:value>
<para>
<r:func>getXSLTemplates</r:func> returns list with two elements
<segmentedlist>
 <seglistitem><seg>match</seg><seg>a character vector giving the match attribute of the xsl:template nodes</seg></seglistitem>
 <seglistitem><seg>name</seg><seg>a character vector giving the </seg></seglistitem>
</segmentedlist>
</para>
<para>
<r:func>getXSLParameters</r:func> returns a named character vector
giving the names of the XSL parameters and variables. The names on the vector
are either param or variable indicating the type of XSL element.
</para>
</rh:value>

<rh:seealso>
<r:func pkg="XML">getNodeSet</r:func> and <r:func pkg="XML">xpathApply</r:func>
</rh:seealso>

  <xi:include href="/Users/duncan/authorInfo.xml" xpointer="xpointer(/*/author)"/>
<rh:references>
   </rh:references>

<rh:examples>

<rh:example id="" func="getXSLTemplates">
<rh:title> </rh:title>
<rh:description>
<para>This reads one of the XDynDocs XSL files either locally
or remotely.
</para>
</rh:description>
<r:code>
getXSLTemplates("http://www.omegahat.org/XDynDocs/XSL/html.xsl")
<r:output><![CDATA[
$match
 [1] "r:code|r:function|r:test|r:init"        "r:expr"                                 "r:data|r:value|r:object"               
 [4] "programlisting[@lang='r' or @lang='R']" "r:commands"                             "r:plot"                                
 [7] "s:var|r:var"                            "r:func|s:func"                          "r:package"                             
[10] "dots"                                   "sh:code"                                "make:code"                             
[13] "latex"                                  "ignore"                                 "invisible"                             
[16] "omg:func[@pkg]"                         "omg:func[@url]"                         "omg:package"                           
[19] "omg:package[@url]"                      "rwx:func"                               "r:class"                               
[22] "interactive"                            "r:run"                                 

$name
[1] "user.footer.content" "makeVerbatimCode"    "getSVGDim"           "omg:func"           
]]></r:output>
</r:code>
</rh:example>

<r:init/>
<rh:example func="getXSLParameters">
<rh:title>Parameters</rh:title>
<r:code>
getXSLParameters("http://www.omegahat.org/XDynDocs/XSL/html.xsl")
<r:output><![CDATA[

]]></r:output>
</r:code>
</rh:example>
</rh:examples>

<rh:keywords>
<rh:keyword/>
</rh:keywords>
<rh:versionIntroduced version=""/>

</rh:help>
